stages:
  - test
  - deploy

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG
    - when: never

.deploy:
  stage: deploy
  allow_failure: false
  when: manual
  script:
    - echo "deploy $EnvName start!"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $Deploy_IP > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - chmod 400 /home/config/MatchServer_MongoMonitor/SSH.cer
    - ssh -i /home/config/MatchServer_MongoMonitor/SSH.cer $Now_User@$Deploy_IP > /home/Deploy.log 2>&1 << exitDeploy
    - sudo su
    
      # 中轉
      # ssh -i $SSHHub > /home/Deploy.log 2>&1 << exitDeploy
    - if ["$SSHHub" != ""]; then
        ${SSHHub} > /home/Deploy.log 2>&1;
        sudo su;
      fi
    
      # 創建工作目錄
    - mkdir -p /home/BGX/$CI_PROJECT_NAME$EnvName
    - cd /home/BGX/$CI_PROJECT_NAME$EnvName
    
      # 拉取最新代碼
    - git init
    - git remote add origin $CI_REPOSITORY_URL
    - git fetch --all
    - git reset --hard origin/main
    - git pull origin main
    
      # 設置 Config File
    - cp /home/config/MatchServer_MongoMonitor/Config.ini ./src/config/Config.ini
    
    - docker build -t $CI_PROJECT_NAME .
    - docker stop $CI_PROJECT_NAME$EnvName
    - docker container rm $CI_PROJECT_NAME$EnvName
    
      # 需要选择采用那个Confi File
    - docker run --restart=always -e CONFIG_PATH="config/Config.ini" -it -d --name=$CI_PROJECT_NAME$EnvName $CI_PROJECT_NAME
    - docker ps
    
      # 退出中轉
    - if ["$SSHHub" != ""]; then
        exit;
        exitDeploy;
        cat /home/Deploy.log;
      fi
    
    - exit
    - exitDeploy
    - cat /home/Deploy.log
    
    - echo "deploy $EnvName done!"

unit-test-job:
  stage: test
  tags:
    - Dev
  artifacts:
    reports:
      junit:
        - src/Report.xml
  script:
    - echo "Unit test start!"
    - cp /home/config/MatchServer_MongoMonitor/Config.ini ./src/config/Config.ini
    - export PYTHONPATH=$CI_PROJECT_DIR/src
    - export CONFIG_PATH=./config/Config.ini
    - cd ./src
    - pip install -r requirement.txt
    - pytest ../UnitTest/Test_Main.py --junitxml=Report.xml
    - echo "Unit test done!"

deploy-Dev-job:
  tags:
    - Dev
  environment:
    name: Dev
    url: $ViewDeploymentURL
  variables:
    EnvName: Dev
    Now_IP: $Deploy_IP
    Now_SSH: $Deploy_SSH
    Now_User: $Deploy_User
    Now_Config_Path: './src/config/Dev.ini'
  extends:
    - .deploy
  only:
    - main

deploy-PreDeploy-job:
  environment:
    name: PreDeploy
    url: $ViewDeploymentURL
  variables:
    EnvName: PreDeploy
    Now_IP: $Deploy_IP
    Now_SSH: $Deploy_SSH
    Now_User: 'ubuntu'
    Now_Config: $Deploy_Config
  extends:
    - .deploy
  tags:
    - PreDeploy
  rules:
    - if: $CI_COMMIT_TAG && $New_ENVName == null

deploy-Other-job:
  environment:
    name: $New_ENVName
    url: $New_ViewDeploymentURL
  extends:
    - .deploy
  variables:
    EnvName: $New_ENVName
    Now_IP: $New_Deploy_IP
    Now_SSH: $New_Deploy_SSH
    Now_Config: $New_Deploy_Config
    Now_ViewDeploymentURL: $New_ViewDeploymentURL
    Now_User: $New_Deploy_User
    SSHHub: $New_SSHHub
  tags:
    - $New_ENVName
  rules:
    - if: $CI_COMMIT_TAG && $New_ENVName != null
